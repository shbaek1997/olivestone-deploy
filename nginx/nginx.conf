#user 명
user  nginx;
# worker process 개수, 1보다 높은걸 권장 (성능, cpu관련)
worker_processes  auto;
#에러 보여주는 방식
error_log  /var/log/nginx/error.log warn;
# 프로세스 아이디
pid        /var/run/nginx.pid;
# worker process 당 접속자 수..
events {
    worker_connections  1024;
}
http {
    #mime.types 파일내용
    include       /etc/nginx/mime.types;
    #기본으로 octet-stream형식
    default_type  application/octet-stream;
    #docker-server는 docker-compose yml의 server 관련 service 명이어야 함.
    upstream backend{
        server docker-server:5000;
    }
    #파일 클라이언트 업로드 사이즈 상한..
    client_max_body_size 1000M;

    server {
        #nginx는 80에 동작할거고..
        # 서버 이름은 localhost
        listen 80;
        server_name localhost;

        # :80/api 요청을 upstream backend로 포워딩
		# /api 경로로 오는 요청을 백엔드 upstream 의 /api 경로로 포워딩
        location /api {
            proxy_pass         http://backend;
        }

		# / 경로로 오는 요청을 처리, front-end의 build 폴더 경로의 index.html파일을 찾음
        # 만약에 경로를 refresh할 때, index 파일을 못찾는 경우가 있는데, 이를 try files로 해결
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri /index.html;                 
        }
    }
    #로그 형식 지정
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    #로그가 쌓이는 경로
    access_log  /var/log/nginx/access.log  main;
    #파일 커널 내부 복사
    sendfile        on;
    #클라이언트 연결 지속 시간
    keepalive_timeout  65;
    
}